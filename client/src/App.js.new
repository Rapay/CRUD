import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import {
  Container,
  Table,
  Button,
  Form,
  Row,
  Col,
  Nav,
  Card,
  Alert
} from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

const API_URL = 'http://localhost:5000/api';

function App() {
  // Estados
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [activeTab, setActiveTab] = useState('login');
  const [alunos, setAlunos] = useState([]);
  const [tutores, setTutores] = useState([]);
  const [aulas, setAulas] = useState([]);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  // Forms
  const [loginForm, setLoginForm] = useState({ email: '', senha: '' });
  const [registerForm, setRegisterForm] = useState({ nome: '', email: '', senha: '' });
  const [aulaForm, setAulaForm] = useState({
    data: new Date(),
    tipo: 'TEORICA',
    tutorId: ''
  });

  // Configuração do Axios
  axios.defaults.baseURL = API_URL;
  if (token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }
  // Efeitos
  useEffect(() => {
    if (token) {
      fetchData();
    }
  }, [token]);

  // Funções auxiliares
  const fetchData = async () => {
    try {
      const [tutoresRes, aulasRes] = await Promise.all([
        axios.get('/tutores'),
        axios.get('/aulas')
      ]);

      setTutores(tutoresRes.data);
      setAulas(aulasRes.data);
    } catch (err) {
      setError('Erro ao carregar dados');
    }
  };
  // Handlers de autenticação
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.post('/alunos/login', loginForm);
      setToken(res.data.token);
      localStorage.setItem('token', res.data.token);
      setActiveTab('aulas');
      setError('');
      console.log('Login bem sucedido:', res.data);
    } catch (err) {
      console.error('Erro no login:', err);
      setError(err.response?.data?.mensagem || 'Erro no login. Verifique suas credenciais.');
    }
  };
  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/alunos/register', registerForm);
      setMessage('Registro realizado com sucesso!');
      setActiveTab('login');
      setRegisterForm({ nome: '', email: '', senha: '' });
      setError('');
      console.log('Registro bem sucedido:', response.data);
    } catch (err) {
      console.error('Erro no registro:', err);
      setError(err.response?.data?.mensagem || 'Erro no registro. Verifique os dados informados.');
    }
  };

  const handleLogout = () => {
    setToken(null);
    localStorage.removeItem('token');
    setActiveTab('login');
  };
  // Handler de agendamento
  const handleAgendarAula = async (e) => {
    e.preventDefault();
    try {
      // O middleware de autenticação já vai identificar o aluno pelo token
      await axios.post('/aulas', aulaForm);
      setMessage('Aula agendada com sucesso!');
      fetchData();
    } catch (err) {
      setError(err.response?.data?.message || 'Erro ao agendar aula');
    }
  };

  // Renderização condicional de formulários
  const renderLoginForm = () => (
    <Form onSubmit={handleLogin}>
      <Form.Group>
        <Form.Label>Email</Form.Label>
        <Form.Control
          type="email"
          value={loginForm.email}
          onChange={e => setLoginForm({...loginForm, email: e.target.value})}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label>Senha</Form.Label>
        <Form.Control
          type="password"
          value={loginForm.senha}
          onChange={e => setLoginForm({...loginForm, senha: e.target.value})}
        />
      </Form.Group>
      <Button type="submit" className="mt-3">Login</Button>
    </Form>
  );

  const renderRegisterForm = () => (
    <Form onSubmit={handleRegister}>
      <Form.Group>
        <Form.Label>Nome</Form.Label>
        <Form.Control
          type="text"
          value={registerForm.nome}
          onChange={e => setRegisterForm({...registerForm, nome: e.target.value})}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label>Email</Form.Label>
        <Form.Control
          type="email"
          value={registerForm.email}
          onChange={e => setRegisterForm({...registerForm, email: e.target.value})}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label>Senha</Form.Label>
        <Form.Control
          type="password"
          value={registerForm.senha}
          onChange={e => setRegisterForm({...registerForm, senha: e.target.value})}
        />
      </Form.Group>
      <Button type="submit" className="mt-3">Registrar</Button>
    </Form>
  );

  const renderAgendarAulaForm = () => (
    <Form onSubmit={handleAgendarAula}>
      <Form.Group>
        <Form.Label>Data</Form.Label>
        <DatePicker
          selected={aulaForm.data}
          onChange={date => setAulaForm({...aulaForm, data: date})}
          showTimeSelect
          dateFormat="Pp"
          className="form-control"
        />
      </Form.Group>
      <Form.Group>
        <Form.Label>Tipo</Form.Label>
        <Form.Control
          as="select"
          value={aulaForm.tipo}
          onChange={e => setAulaForm({...aulaForm, tipo: e.target.value})}
        >
          <option value="TEORICA">Teórica</option>
          <option value="PRATICA">Prática</option>
        </Form.Control>
      </Form.Group>
      <Form.Group>
        <Form.Label>Tutor</Form.Label>
        <Form.Control
          as="select"
          value={aulaForm.tutorId}
          onChange={e => setAulaForm({...aulaForm, tutorId: e.target.value})}
        >
          <option value="">Selecione um tutor...</option>
          {tutores.map(tutor => (
            <option key={tutor.id} value={tutor.id}>
              {tutor.nome} - {tutor.especialidade}
            </option>
          ))}
        </Form.Control>
      </Form.Group>
      <Button type="submit" className="mt-3">Agendar Aula</Button>
    </Form>
  );

  // Renderização principal
  return (
    <Container className="py-4">
      {!token ? (
        <Card>
          <Card.Body>
            <Nav variant="tabs" activeKey={activeTab} onSelect={setActiveTab}>
              <Nav.Item>
                <Nav.Link eventKey="login">Login</Nav.Link>
              </Nav.Item>
              <Nav.Item>
                <Nav.Link eventKey="register">Registro</Nav.Link>
              </Nav.Item>
            </Nav>
            <div className="mt-3">
              {activeTab === 'login' ? renderLoginForm() : renderRegisterForm()}
            </div>
          </Card.Body>
        </Card>
      ) : (
        <>
          <div className="d-flex justify-content-between mb-4">
            <Nav variant="tabs" activeKey={activeTab} onSelect={setActiveTab}>
              <Nav.Item>
                <Nav.Link eventKey="aulas">Minhas Aulas</Nav.Link>
              </Nav.Item>
              <Nav.Item>
                <Nav.Link eventKey="agendar">Agendar Aula</Nav.Link>
              </Nav.Item>
            </Nav>
            <Button variant="outline-danger" onClick={handleLogout}>Sair</Button>
          </div>

          {message && <Alert variant="success" onClose={() => setMessage('')} dismissible>{message}</Alert>}
          {error && <Alert variant="danger" onClose={() => setError('')} dismissible>{error}</Alert>}

          {activeTab === 'aulas' ? (
            <Table striped bordered hover>
              <thead>
                <tr>
                  <th>Data</th>
                  <th>Tipo</th>
                  <th>Tutor</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {aulas.map(aula => (
                  <tr key={aula.id}>
                    <td>{new Date(aula.data).toLocaleString()}</td>
                    <td>{aula.tipo}</td>
                    <td>{tutores.find(t => t.id === aula.TutorId)?.nome}</td>
                    <td>{aula.status}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          ) : (
            renderAgendarAulaForm()
          )}
        </>
      )}
    </Container>
  );
}

export default App;
